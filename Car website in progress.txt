CAR website:
what will it consisit of=>
-postgress SQL database
-django admin customisation
-search functionality
-django pagination
-django messages
-user authentication
-login with google and facebook
-sending emails
-database dumpdata and loaddata
-deploy on heroku server


--> activating virtual environment(gitbash terminal)
-python -m venv env(its virtual environment name )

-->to get into the virtual environment
-source env/Scripts/activate

-->to create django project
-python -m django startproject carzone

-->carzone project server 
- python manage.py runserver 127.0.0.1:7000

-->creating an app
-python mange.py startapp appname

-->register your app
- go to carzone setting and under installed apps add "'pages.apps.PagesConfig'" . here PagesConfig is the class name in pages app 

-->add your home page
- 1> in main app , inside urls "path('',include('pages.urls'))," add this and import include. this direct to app url
2> in pages app ,inside url "path('',views.home,name='home')," add this . this direct to app views
3> create the fn home inside view.py by "def home(request):
    						return render(request,'pages/home.html')" writing this . this directs to the page searched for

-->to add the pages searched for add a template folder at layere 1. create pages folder inside it. then add the pages with required names like home.html
   this is the page called from views.py. also in the main app settings inside templates add "'templates'"the folder name

-->setting git and github
{
	->in main folder ,initialise by git init
	->git add .
	->git commit -m "#1 commit"
	->git remote add origin "repo url"
	->git push -u origin master 
}

--> home and static files

-under carzone app make static folder and paste the static files
-write these 2 lines in setting,py of carzone app {
	STATIC_ROOT=os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'carzone/static'),
]
}
- now run python manage.py collectstatic
- write "load static" at top of the page
- replace every link with href="{% static 'img/favicon.ico' %}"
- clear the cache and reload by ctrl+f5

-->base template
- create a new file base.html in template folder
- copy paste the content that need to be there in each page
- inside body write {  {% block content %}

{% endblock %} }
- inside other pages write { {% extends 'base.html' %}
{% load static %}

{% block content %}  }
- at last write {{% endblock %}}

--> now we will be breaking the base.html into 3 parts ,i.e., 1> top bar 2>nav bar 3->footer
- for this create a folder include inside templates and make these 3 html files
- copy respective contents from base.html to all these 3 files
- write these 3 commands at respective places {
	{% include "includes/topbar.html" %}
	{% include "includes/navbar.html" %}
	{% include "includes/footer.html" %}
}
- by this we have seperated every section and again included it in base.html . this made code more readable

--> next is making pages to the links and adding dynamic links
-inside templates->pages create the navbar link static pages like contacts services etc
-map the urls and views of the pages app like shown below{
	for urls-> path('about',views.about,name='about'),
    	for views->def about(request):
    			return render(request,'../templates/pages/about.html')
}

-->create the content of those pages
-->create super user by using - python manage.py createsuperuser(Car_Zone)

-> Team Model {
		from django.db import models
	
		class Team(models.Model):
    first_name=models.CharField(max_length=255)
    last_name=models.CharField(max_length=255)
    designation=models.CharField(max_length=255)
    photo=models.ImageField(upload_to='photos/%Y/%M/%D/')
    facebook_link=models.URLField(max_length=100)
    twitter_link=models.URLField(max_length=100)
    google_plus_link=models.URLField(max_length=100)
    created_date=models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.first_name +" " + self.last_name
		
}

-now register the model on admins.py of the same app by using -    from .models import Team
								   admin.site.register(Team)

- now use python manage.py make migrations and python manage.py migrate command to migrate the database

-> now the images and other media files which we will store in the database will be broken so to fix that we do media configurations
-> MEDIA Configrations{
		in main project setting.py - 

						MEDIA_ROOT=os.path.join(BASE_DIR, 'media')
						MEDIA_URL='/media/'

		in main project urls.py -	from django.conf.urls.static import static
						from django.conf import settings
							
						
						urlpatterns = [
   								 path('admin/', admin.site.urls),
 							         path('',include('pages.urls')),
							      ] + static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)
}

-> displaying team data into frontend
- first of all u have to extract data from database i.e., from model(Team here).
- do this in views.py in respective app to access the model and pass it to the html page{
	home function will look like -
					def home(request):
   						 team=Team.objects.all()
   
   						 data={
   							     'teams':team,
   							 }
   					 return render(request,'../templates/pages/home.html',data)

} 
- after this u need to access the data in html page {
	to run for loop use syntax - {% for team in teams %} .....  {% endfor %}
	to access particular field use syntax {{ team.first_name }} or {{ team.photo.url }}(for photo)
}

-> Team Admin customisation( admins.py)
- displaying table containing team mates, their photos ,search bar, filter
- add Html tag(for photo) - from django.utils.html import format_html
- add class {
		class TeamAdmin(admin.ModelAdmin):
   			 def thumbnail(self,object):
     		         return format_html('<img src="{}" width="40" style="border-radius: 50%;" />'.format(object.photo.url))
                thumbnail.short_description='Photo'

  	       list_display = ('id','thumbnail','first_name','designation','created_date',)
    	       list_display_links = ('id','thumbnail','first_name',)
   	       search_fields = ('first_name','last_name','designation',)
    	       list_filter = ('designation',)
}
- register the above class in admins by 'admin.site.register(Team,TeamAdmin)'